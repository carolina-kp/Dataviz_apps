import streamlit as st
import seaborn as sns
import pandas as pd
import time
import matplotlib.pyplot as plt
import plotly.express as px
from streamlit_gsheets import GSheetsConnection

st.write("**Loading data from Google Sheets**")

# Connect to Google Sheets
connect = st.connection("gsheets", type=GSheetsConnection)

# Try to read the dataset from Google Sheets
df = None
try:
    df = connect.read(worksheet="diamonds_db_design")  # Read from Google Sheets
    if df is None or df.empty:
        st.error("❌ Google Sheets is empty or not accessible. Please upload data manually.")
        st.stop()
except Exception as e:
    st.error(f"❌ Error loading data from Google Sheets: {e}")
    st.stop()

# ✅ Convert data types safely
try:
    df = df.astype({"carat": float, "price": int})
except Exception as e:
    st.error(f"⚠️ Error converting data types: {e}")
    st.stop()

st.title("💎 Database Design Questions: Diamond Market Analysis")

# Initialize session state
if "progress_stage" not in st.session_state:
    st.session_state.progress_stage = 0
    st.session_state.start_time = None
    st.session_state.answer_time_1 = None
    st.session_state.answer_time_2 = None

#  Show First Chart Button
st.write("### Question 1: What is the relationship between carat size and price?")

if st.session_state.progress_stage == 0 and st.button("Show First Chart"):
    st.session_state.progress_stage = 1
    st.session_state.start_time = time.time()  # Start tracking time
    st.rerun()

#  First Chart (Carat vs. Price)
if st.session_state.progress_stage >= 1:
    st.write("### Chart 1: Carat Size vs. Price")

    scatter_chart = px.scatter(df, x="carat", y="price", color="cut", 
                               title="Diamond Price vs. Carat Size", 
                               labels={"carat": "Carat Size", "price": "Price ($)"})
    st.plotly_chart(scatter_chart)

    if st.session_state.answer_time_1 is None and st.button("I answered this question"):
        st.session_state.answer_time_1 = time.time() - st.session_state.start_time
        st.success(f"✅ Time for question 1: **{st.session_state.answer_time_1:.2f} seconds**")
        st.session_state.progress_stage = 2
        st.session_state.start_time = time.time()
        st.rerun()

# Show Second Chart Button
st.write("### Question 2: How does the number of diamonds vary across different colors?")

if st.session_state.progress_stage == 2 and st.button("Show Second Chart"):
    st.session_state.progress_stage = 3
    st.rerun()

# Second Chart (Number of Diamonds per Color)
if st.session_state.progress_stage >= 3:
    st.write("### Chart 2: Number of Diamonds per Color")

    color_counts = df["color"].value_counts().reset_index()
    color_counts.columns = ["Color", "Count"]

    fig, ax = plt.subplots(figsize=(8, 5))
    sns.barplot(x="Color", y="Count", data=color_counts, ax=ax, palette="Set2")
    ax.set_title("Number of Diamonds by Color")
    ax.set_ylabel("Count of Diamonds")
    st.pyplot(fig)

    if st.session_state.answer_time_2 is None and st.button("I answered this question too"):
        st.session_state.answer_time_2 = time.time() - st.session_state.start_time
        st.success(f"✅ Time for question 2: **{st.session_state.answer_time_2:.2f} seconds**")
        st.session_state.progress_stage = 4
        st.rerun()

if st.session_state.answer_time_1:
    st.write(f"**Time for first question:** {st.session_state.answer_time_1:.2f} seconds")

if st.session_state.answer_time_2:
    st.write(f"**Time for second question:** {st.session_state.answer_time_2:.2f} seconds")
#---------------------------------------------------------------------------------------------------------------------


import streamlit as st
import seaborn as sns
import pandas as pd
import random
import time
import matplotlib.pyplot as plt
import plotly.express as px
from streamlit_gsheets import GSheetsConnection

st.set_page_config(page_title="Diamond Market Analysis", layout="wide")

st.title("💎 Database Design Questions: Diamond Market Analysis")
st.write("Data automatically updates when Google Sheet changes")

# Initialize connection to Google Sheets
conn = st.connection("gsheets", type=GSheetsConnection)

# Read the data from the Google Sheet
diamond_data = conn.read(spreadsheet="https://docs.google.com/spreadsheets/d/1UFaq5QBW6F1ulq38_FTOjRy-qDZQPosi4Zc10SbZG3U/edit")


# Convert data types for visualization
diamond_data["carat"] = pd.to_numeric(diamond_data["carat"], errors="coerce")
diamond_data["price"] = pd.to_numeric(diamond_data["price"], errors="coerce")

# Initialize session state variables if not already present
if "progress_stage" not in st.session_state:
    st.session_state.progress_stage = 0  # 0: No chart, 1: First chart, 2: Second chart
    st.session_state.start_time = None
    st.session_state.answer_time_1 = None
    st.session_state.answer_time_2 = None
    st.session_state.random_chart = None

# Function to randomly choose between question 1 and 2
def pick_random_chart():
    return random.randint(1, 2)

# Pick a random chart if not already picked
if st.session_state.progress_stage == 0:
    st.session_state.random_chart = pick_random_chart()

# Display the chosen question
if st.session_state.random_chart == 1:
    question_text = "### Question 1: What is the relationship between carat size and price?"
else:
    question_text = "### Question 2: How does the number of diamonds vary across different colors?"

st.write(question_text)

# Button to show the chart
if st.session_state.progress_stage == 0 and st.button("Show Chart"):
    st.session_state.progress_stage = 1
    st.session_state.start_time = time.time()
    st.rerun()

# Display the selected chart
if st.session_state.progress_stage >= 1:
    if st.session_state.random_chart == 1:
        st.write("### Chart: Carat Size vs. Price")
        
        scatter_chart = px.scatter(
            diamond_data, x="carat", y="price", color="cut",
            title="Diamond Price vs. Carat Size",
            labels={"carat": "Carat Size", "price": "Price ($)"}
        )
        st.plotly_chart(scatter_chart, use_container_width=True)
    else:
        st.write("### Chart: Number of Diamonds per Color")
        
        color_counts = diamond_data["color"].value_counts().reset_index()
        color_counts.columns = ["Color", "Count"]
        
        # Sort by diamond color (assuming standard D-Z scale)
        standard_colors = list("DEFGHIJKLMNOPQRSTUVWXYZ")
        color_counts["Color_Order"] = color_counts["Color"].apply(lambda x: standard_colors.index(x) if x in standard_colors else 999)
        color_counts = color_counts.sort_values("Color_Order").drop("Color_Order", axis=1)
        
        bar_chart = px.bar(
            color_counts, 
            x="Color", 
            y="Count",
            title="Number of Diamonds by Color",
            labels={"Color": "Diamond Color", "Count": "Number of Diamonds"},
            color="Color"
        )
        st.plotly_chart(bar_chart, use_container_width=True)

    # "I answered this question" button
    if st.session_state.answer_time_1 is None and st.button("I answered this question"):
        st.session_state.answer_time_1 = time.time() - st.session_state.start_time
        st.success(f"Time taken to answer: {st.session_state.answer_time_1:.2f} seconds")
        st.session_state.progress_stage = 2
        st.session_state.start_time = time.time()  # Reset timer for next question
        st.rerun()

# Display the second question and button for second chart
if st.session_state.progress_stage == 2:
    st.write("### Question 2: How does the number of diamonds vary across different colors?")

    if st.button("Show Second Chart"):
        st.session_state.progress_stage = 3
        st.rerun()

# Second Chart (Number of Diamonds per Color)
if st.session_state.progress_stage >= 3:
    st.write("### Chart 2: Number of Diamonds per Color")

    color_counts = diamond_data["color"].value_counts().reset_index()
    color_counts.columns = ["Color", "Count"]

    fig, ax = plt.subplots(figsize=(8, 5))
    ax = sns.barplot(x="Color", y="Count", data=color_counts, ax=ax, palette="Set2")
    ax.set_title("Number of Diamonds by Color")
    ax.set_ylabel("Count of Diamonds")
    st.pyplot(fig)

    if st.session_state.answer_time_2 is None and st.button("I answered this question too"):
        st.session_state.answer_time_2 = time.time() - st.session_state.start_time
        st.success(f"Time taken to answer: {st.session_state.answer_time_2:.2f} seconds")
        st.session_state.progress_stage = 4  # End of questions
        st.rerun()

# Display timing results
if st.session_state.answer_time_1:
    st.write(f"**Time for first question:** {st.session_state.answer_time_1:.2f} seconds")

if st.session_state.answer_time_2:
    st.write(f"**Time for second question:** {st.session_state.answer_time_2:.2f} seconds")

# Reset button
if st.session_state.progress_stage == 4 and st.button("Reset Quiz"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# Add auto-refresh capability to show changes in Google Sheet
if st.session_state.progress_stage < 4:  # Only auto-refresh while quiz is active
    st.empty()
    time.sleep(5)
    st.rerun()
